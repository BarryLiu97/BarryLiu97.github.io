<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>(C\C++) auto</title>
      <link href="posts/13803.html"/>
      <url>posts/13803.html</url>
      
        <content type="html"><![CDATA[<h2 id="auto-before-C-0x"><a href="#auto-before-C-0x" class="headerlink" title="auto before C++0x"></a>auto before C++0x</h2><blockquote><p>在C++0x之前，<code>auto</code>关键字的意义与static相对，是指自动存储的，写不写的含义都是一样的，这就导致了<code>auto</code>关键字非常的鸡肋；</p><p><strong>PS</strong>: auto关键字原来的含义（表示local变量）是多余而无用的——标准委员会的成员们在数百万行代码中仅仅只找到几百个用到auto关键字的地方，并且大多数出现在测试代码中，有的甚至就是一个bug。</p></blockquote><h2 id="auto的使用方法"><a href="#auto的使用方法" class="headerlink" title="auto的使用方法"></a>auto的使用方法</h2><blockquote><p>C++11 赋予 auto 关键字新的含义，使用它来做自动类型推导。也就是说，使用了 auto 关键字以后，编译器会在编译期间自动推导出变量的类型，这样我们就不用手动指明变量的数据类型了。</p><p><strong>NOTE</strong>:<code>auto</code>类型是在<font color="red"><strong><em>编译期间</em></strong></font>由编译器推导的</p></blockquote><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> name <span class="token operator">=</span> value<span class="token punctuation">;</span></code></pre><p>例如：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">auto</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token number">12.8</span><span class="token punctuation">;</span><span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>n<span class="token punctuation">;</span><span class="token keyword">auto</span> url <span class="token operator">=</span> <span class="token string">"http://c.biancheng.net/cplus/"</span><span class="token punctuation">;</span></code></pre><p>下面我们来解释一下：</p><ul><li>第 1 行中，10 是一个整数，默认是 int 类型，所以推导出变量 n 的类型是 int。</li><li>第 2 行中，12.8 是一个小数，默认是 double 类型，所以推导出变量 f 的类型是 double。</li><li>第 3 行中，&amp;n 的结果是一个 int* 类型的指针，所以推导出变量 f 的类型是 int*。</li><li>第 4 行中，由双引号<code>""</code>包围起来的字符串是 const char* 类型，所以推导出变量 url 的类型是 const char*，也即一个常量指针。</li></ul><p>接下来，我们再来看一下 auto 和 const 的结合：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">int</span>  x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span>  <span class="token keyword">auto</span> n <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//n 为 const int ，auto 被推导为 int</span><span class="token keyword">auto</span> f <span class="token operator">=</span> n<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//f 为 const int，auto 被推导为 int（const 属性被抛弃）</span><span class="token keyword">const</span> <span class="token keyword">auto</span> <span class="token operator">&amp;</span>r1 <span class="token operator">=</span> x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//r1 为 const int&amp; 类型，auto 被推导为 int</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span>r2 <span class="token operator">=</span> r1<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//r1 为 const int&amp; 类型，auto 被推导为 const int 类型</span></code></pre><p>最后我们来简单总结一下 auto 与 const 结合的用法：</p><ul><li>当类型不为引用时，auto 的推导结果将不保留表达式的 const 属性；</li><li>当类型为引用时，auto 的推导结果将保留表达式的 const 属性。</li></ul><h2 id="auto-的限制"><a href="#auto-的限制" class="headerlink" title="auto 的限制"></a>auto 的限制</h2><p>前面介绍推导规则的时候我们说过，使用 auto 的时候必须对变量进行初始化，这是 auto 的限制之一。那么，除此以外，auto 还有哪些其它的限制呢？</p><ol><li><p>auto 不能在函数的参数中使用。</p><p>这个应该很容易理解，我们在定义函数的时候只是对参数进行了声明，指明了参数的类型，但并没有给它赋值，只有在实际调用函数的时候才会给参数赋值；而 auto 要求必须对变量进行初始化，所以这是矛盾的。</p></li><li><p>auto 不能作用于类的非静态成员变量（也就是没有 static 关键字修饰的成员变量）中。</p></li><li><p>auto 关键字不能定义数组，比如下面的例子就是错误的：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">char</span> url<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://c.biancheng.net/"</span><span class="token punctuation">;</span><span class="token keyword">auto</span>  str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> url<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//arr 为数组，所以不能使用 auto</span><span class="token keyword">auto</span> temp <span class="token operator">=</span> url<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// auto被转化为int*</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span> temp<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// error, because temp is not a array any more.</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C\C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
